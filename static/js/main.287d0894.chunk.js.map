{"version":3,"sources":["functions/index.js","img/error.png","componennts/loader.tsx","Search.tsx","pages/Forecast.tsx","componennts/Recommend.tsx","pages/Main.tsx","pages/Weather.tsx","pages/NotFound.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["formData","string","day","split","Date","toString","Loader","className","viewBox","xmlns","cx","cy","r","Search","props","useState","search","value","setValue","history","useHistory","to","type","onChange","event","target","onKeyPress","code","push","go","Forecast","data","setData","cod","setCod","loading","setLoading","useEffect","loadContent","params","useParams","today","dd","String","getDate","padStart","mm","getMonth","yyyy","getFullYear","url","city","fetch","then","response","json","dates","list","map","item","dt_txt","filter","i","currArr","indexOf","sortedResults","length","date","weather","main","todaysData","todayNew","arraysOfTimeToday","year","temp","feels_like","icon","allTemp","allFeelsLike","a","Math","round","reduce","b","includes","itemDate","returnedData","id","name","src","ErrorImage","alt","slice","dayNow","info","Recommend","title","Main","placeholder","href","Weather","status","setStatus","nowDayData","description","NotFound","style","marginTop","App","exact","path","children","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.287d0894.chunk.js","sourcesContent":["export const formData = (string) => {\n    const date = string.split(\"-\");\n    const day = date[2];\n\n    var d = new Date(string);\n    var dayName = d.toString().split(' ')[0];\n\n    return dayName+\" \"+day;\n}\n\nexport const formatHours = (string) => {\n    const newHour = string.split(\" \")[1];\n    return newHour;\n}","export default __webpack_public_path__ + \"static/media/error.ed78222e.png\";","import React from 'react';\nimport '../css/loader.css'\n\nconst Loader: React.FC = () => {\n    return (\n        <div className=\"loader_block\">\n            <svg viewBox=\"0 0 100 100\" xmlns=\"http://www.w3.org/2000/svg\" className=\"svg_loader\">\n                <circle cx=\"50\" cy=\"50\" r=\"35\" className=\"circle_loader\" />\n            </svg>\n        </div>\n    )\n}\n\nexport default Loader;","import React, { useState } from 'react';\nimport { Link, useHistory } from \"react-router-dom\";\n\ninterface Props {\n    search: string\n}\n\nconst Search: React.FC<Props> = (props) => {\n    const [value, setValue] = useState(props.search)\n    let history = useHistory();\n\n    const changeValue = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setValue(event.target.value)\n    }\n\n    const handleKeypress = (event: React.KeyboardEvent<HTMLInputElement>) => {\n        if (event.code === \"Enter\") {\n            history.push(\"/forecast/\"+value)\n            history.go(0)\n        }\n    }\n\n    return (\n        <div className=\"search_section\">\n            <Link to=\"/\"><span className=\"title_header\">WeatherApp</span></Link>\n            <div className=\"search_container\">\n                <input type=\"text\" className=\"search_input\" value={value} onChange={changeValue}\n                onKeyPress={handleKeypress} />\n                <div className=\"searchIcon\">\n                    <span className=\"material-icons-round\">search</span>\n                </div >\n            </div >\n        </div>\n    )\n}\n\nexport default Search;","import React, { useEffect, useState } from 'react';\nimport {\n    useParams, Link\n} from \"react-router-dom\";\n\nimport { formData } from '../functions/index'\nimport '../css/forecast.css'\nimport ErrorImage from '../img/error.png'\n\nimport Loader from '../componennts/loader'\nimport Search from '../Search'\n\ninterface RouteParams {\n    city: string\n}\n\nconst Forecast: React.FC = () => {\n    const [data, setData] = useState<IWeather[]>([]);\n    const [cod, setCod] = useState('')\n    const [loading, setLoading] = useState<boolean>(false)\n    useEffect(() => {\n        loadContent();\n    }, []);\n\n    let params = useParams<RouteParams>();\n\n    var today = new Date();\n    var dd = String(today.getDate()).padStart(2, '0');\n    var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\n    var yyyy = today.getFullYear();\n\n    const loadContent = () => {\n        const API_KEY = process.env.REACT_APP_WEATHER_API_KEY;\n        const url = \"https://api.openweathermap.org/data/2.5/forecast?q=\" + params.city + \"&appid=\"+API_KEY;\n\n        fetch(url)\n            .then(response => response.json())\n            .then(data => {\n                setCod(data.cod)\n                if (data.cod == 200) {\n                    const dates = data.list.map((item: any) => {\n                        return item.dt_txt.split(\" \")[0];\n                    }).filter((item: any, i: number, currArr: any) => {\n                        return currArr.indexOf(item) === i;\n                    })\n                    let sortedResults: { date: any; weather: any[]; main: any[] }[] = [];\n                    for (let i = 0; i < dates.length; i++) {\n                        sortedResults.push({\n                            date: dates[i],\n                            weather: [],\n                            main: []\n                        });\n                    }\n\n                    const todayNew = mm + '/' + dd + '/' + yyyy;\n                    const arraysOfTimeToday: any[] = [];\n                    data.list.map((item: any) => {\n                        const date = item.dt_txt.split(\"-\");\n                        const year = date[0];\n                        const month = date[1];\n                        const day = date[2].split(\" \")[0];\n\n                        const dateItem = month + \"/\" + day + \"/\" + year;\n\n                        if (dateItem === todayNew) {\n                            arraysOfTimeToday.push(item)\n                        }\n                    })\n\n                    var todaysData;\n                    if (arraysOfTimeToday.length === 1) {\n                        todaysData = {\n                            weather: [{\n                                temp: arraysOfTimeToday.map((item: any) => item.main.temp),\n                                feels_like: arraysOfTimeToday.map((item: any) => item.main.feels_like),\n                            }],\n                            main: [{\n                                icon: (arraysOfTimeToday[0].weather.map((data: any) => data.icon)).toString()\n                            }]\n                        }\n                    }\n                    else {\n                        const allTemp: any[] = [];\n                        const allFeelsLike: any[] = [];\n                        arraysOfTimeToday.map((a) => {\n                            allTemp.push(a.main.temp)\n                            allFeelsLike.push(a.main.feels_like)\n                        })\n                        todaysData = {\n                            weather: [{\n                                temp: Math.round((allTemp.reduce((a, b) => a + b)) / allTemp.length),\n                                feels_like: Math.round((allFeelsLike.reduce((a, b) => a + b)) / allFeelsLike.length),\n                            }],\n                            main: [{\n                                icon: (arraysOfTimeToday[0].weather.map((data: any) => data.icon)).toString()\n                            }]\n                        }\n                    }\n\n                    const dailyData = data.list.filter((list: any) => list.dt_txt.includes(\"15:00:00\"))\n                    dailyData.map((item: any) => {\n                        let itemDate = item.dt_txt.split(\" \")[0];\n\n                        for (let i = 0; i < sortedResults.length; i++) {\n                            if (sortedResults[i].date === itemDate) {\n                                sortedResults[i].weather.push(item.main);\n                                sortedResults[i].main.push(item.weather[0]);\n                            }\n                        }\n                    })\n                    const returnedData = [\n                        {\n                            city: {\n                                id: data.city.id,\n                                name: data.city.name\n                            },\n                            list: sortedResults\n                        }\n                    ]\n                    returnedData[0].list[0].weather = todaysData.weather;\n                    returnedData[0].list[0].main = todaysData.main;\n                    setData(returnedData)\n                }\n                setLoading(true)\n            });\n    }\n    return (\n        <div>\n            <Search search={params.city} />\n            <div className=\"main_container\">\n                {!loading ? (\n                    <div className=\"loader_block_comments\">\n                        <Loader />\n                    </div>\n                ) : (\n                        <div>\n                            {cod !== \"200\" ? (\n                                <div className=\"error_weather\">\n                                    <img src={ErrorImage} alt=\"Error\" className=\"error_image\" />\n                                    <span className=\"error_text\">The city was not found! Or it could be an error with the API</span>\n                                </div>\n                            ) : (\n                                    <div>\n                                        {data.map((item, id) => {\n                                            return (\n                                                <div key={item.city.id}>\n                                                    <h2 className=\"title_weather\">{item.city.name}</h2>\n\n                                                    <div className=\"weather_container\">\n                                                        {item.list.slice(0, 5).map((list, i) => {\n                                                            // console.log(today.getDate())\n                                                            const dayNow = yyyy + \"-\" + mm + \"-\" + dd;\n                                                            return (\n                                                                <Link to={\"/\" + params.city + \"/\" + (list.date).split(\"-\")[2]} className=\"weather_date_container\" key={i}>\n                                                                    <div key={i}>\n                                                                        <span className=\"weather_date\">{list.date === dayNow ? \"Today\" : formData(list.date)}</span>\n\n                                                                        {list.weather.map((info, id) => {\n                                                                            return (\n                                                                                <div key={id} className=\"weather_info_container\">\n                                                                                    <span className=\"weather_temp\">{Math.round(info.temp - 273.15)}°</span>\n                                                                                    <span className=\"weather_feels\">{Math.round(info.feels_like - 273.15)}°</span>\n                                                                                </div>\n                                                                            )\n                                                                        })}\n\n                                                                        {list.main.map((main, id) => {\n                                                                            return (\n                                                                                <div key={id}>\n                                                                                    <img src={`http://openweathermap.org/img/wn/${main.icon.slice(0, -1)}d@2x.png`} alt=\"\" />\n                                                                                </div>\n                                                                            )\n                                                                        })}\n                                                                    </div>\n                                                                </Link>\n                                                            )\n                                                        })}\n                                                    </div>\n                                                </div>\n\n                                            )\n                                        })}\n                                    </div>\n                                )}\n                        </div>\n                    )}\n            </div>\n        </div>\n    )\n}\n\nexport default Forecast;","import React, { useEffect, useState } from 'react';\nimport { Link } from \"react-router-dom\";\n\ninterface IRec {\n    name: string,\n    weather: WeatherMain[],\n    main: WeatherMain\n}\n\ninterface Props {\n    title: string,\n}\n\nconst Recommend: React.FC<Props> = (props) => {\n    const [data, setData] = useState<IRec[]>([]);\n    useEffect(() => {\n        const API_KEY = process.env.REACT_APP_WEATHER_API_KEY;\n        const url = \"http://api.openweathermap.org/data/2.5/weather?q=\" + props.title + \"&appid=\"+API_KEY;\n        fetch(url)\n            .then(response => response.json())\n            .then(data => {\n                data.weather = data.weather[0]\n                setData([data])\n            })\n    }, [props.title])\n    \n    return (\n        <Link to={\"/forecast/\" + props.title} className=\"recommend_block\">\n            <div>\n                {data.map((item: any, id: number) => {\n                    return (\n                        <div key={id} className=\"title_block\">\n                            <span className=\"rec_title\">{item.name}</span>\n\n                            <div className=\"weather_info_container\">\n                                <span className=\"weather_temp\">{Math.round(item.main.temp - 273.15)}°</span>\n                                <span className=\"weather_feels\">{Math.round(item.main.feels_like - 273.15)}°</span>\n                            </div>\n\n                            <div>\n                                <img src={`http://openweathermap.org/img/wn/${item.weather.icon.slice(0, -1)}d@2x.png`} alt=\"\" />\n                            </div>\n\n\n                        </div>\n                    )\n                })}\n            </div>\n        </Link>\n    )\n}\n\nexport default Recommend;","import React, { useState } from 'react';\nimport { Link, useHistory } from \"react-router-dom\";\n\nimport Recommend from '../componennts/Recommend'\nimport '../css/style.css'\n\nconst Main: React.FC = () => {\n    const [value, setValue] = useState('');\n    let history = useHistory();\n\n    const textChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setValue(event.target.value)\n    }\n\n    const handleKeypress = (event: React.KeyboardEvent<HTMLInputElement>) => {\n        if (event.code === \"Enter\") {\n            history.push('/forecast/' + value)\n        }\n    }\n\n    return (\n        <div className=\"main_section\">\n            <Link to=\"/\" className=\"weather_header weather_header_padding\"><span className=\"title_header_weather\">WeatherApp</span></Link>\n            <div className=\"main_seatch_rec_block\">\n                <div className=\"search_main_container\">\n                    <input type=\"text\" className=\"search_input\" placeholder=\"City\" onChange={textChange}\n                        onKeyPress={handleKeypress} />\n                    <div className=\"searchIcon\">\n                        <span className=\"material-icons-round\">search</span>\n                    </div >\n                </div >\n                <div className=\"recommend_section\">\n                    <Recommend title=\"New York\" />\n                    <Recommend title=\"London\" />\n                    <Recommend title=\"Paris\" />\n                    <Recommend title=\"Amsterdam\" />\n                </div>\n            </div>\n            <span className=\"footer_txt\">Made by <a href=\"https://github.com/Arboker\">Denis Lupookov</a></span>\n        </div>\n    )\n}\n\n\nexport default Main;","import React, { useEffect, useState } from 'react';\nimport {\n    useParams, Link\n} from \"react-router-dom\";\n\nimport { formatHours } from '../functions/index'\nimport '../css/weather.css'\nimport ErrorImage from '../img/error.png'\nimport Loader from '../componennts/loader'\n\ninterface RouteParams {\n    city: string,\n    day: string\n}\n\ninterface IWeatherDay {\n    dt_txt: string,\n    main: {\n        temp: number,\n        feels_like: number\n    },\n    weather: [{\n        main: string,\n        description: string,\n        icon: string\n    }],\n    wind: {\n        speed: number\n    }\n}\n\nconst Weather: React.FC = () => {\n    const [data, setData] = useState<IWeatherDay[]>([])\n    const [status, setStatus] = useState(false)\n    const [loading, setLoading] = useState<boolean>(true)\n    let params = useParams<RouteParams>();\n\n    useEffect(() => {\n        const API_KEY = process.env.REACT_APP_WEATHER_API_KEY;\n        const url = \"https://api.openweathermap.org/data/2.5/forecast?q=\" + params.city + \"&appid=\"+API_KEY;\n\n        fetch(url)\n            .then(response => response.json())\n            .then(data => {\n                if (data.cod == 200) {\n                    setLoading(false)\n                    const nowDayData = data.list.filter((item: any) => item.dt_txt.split(\" \")[0].split(\"-\")[2] === params.day);\n                    if (nowDayData.length === 0) {\n                        setStatus(true)\n                    }\n                    setData(nowDayData)\n                }\n                else {\n                    setLoading(false)\n                    setStatus(true)\n                }\n            })\n    }, [params.city, params.day])\n\n    return (\n        <div className=\"weather_section\">\n            <Link to=\"/\" className=\"weather_header\"><span className=\"title_header_weather\">WeatherApp</span></Link>\n\n            <div className=\"weather_main_container\">\n                <h2 className=\"title_main_weather\">{params.city}</h2>\n                <div className=\"weather_main_block\">\n\n                    {loading ? (\n                        <div className=\"loader_block\">\n                            <Loader />\n                        </div>\n                    ) : (\n                            <>\n                                {!status ? (\n                                    <>\n                                        {data.map((item, id) => {\n                                            return (\n                                                <div key={id} className=\"weather_main_date_container\">\n                                                    <span className=\"weather_date\">{formatHours(item.dt_txt)}</span>\n\n                                                    <div key={id} className=\"weather_info_container\">\n                                                        <span className=\"weather_temp\">{Math.round(item.main.temp - 273.15)}°</span>\n                                                        <span className=\"weather_feels\">{Math.round(item.main.feels_like - 273.15)}°</span>\n                                                    </div>\n\n                                                    {item.weather.map((main, id) => {\n                                                        return (\n                                                            <div key={id} className=\"weather_info_container__sub\">\n                                                                <img src={`http://openweathermap.org/img/wn/${main.icon.slice(0, -1)}d@2x.png`} alt=\"\" />\n                                                                <div className=\"info_weather\">\n                                                                    <span className=\"weather_main_title\">{main.main}</span>\n                                                                    <span className=\"weather_description\">{main.description}</span>\n                                                                </div>\n                                                            </div>\n                                                        )\n                                                    })}\n\n                                                </div>\n                                            )\n                                        })}\n                                    </>\n                                ) : (\n                                        <div className=\"error_weather\">\n                                            <div className=\"error_weather\">\n                                                <img src={ErrorImage} alt=\"Error\" className=\"error_image\" />\n                                                <span className=\"error_text\">The data was not found!</span>\n                                            </div>\n                                        </div>\n                                    )}\n                            </>\n                        )}\n                </div>\n            </div>\n            <span className=\"footer_txt footer_margin\">Made by <a href=\"https://github.com/Arboker\">Denis Lupookov</a></span>\n        </div>\n    )\n}\n\n\nexport default Weather;","import React from 'react';\nimport Search from '../Search'\n\nimport ErrorImage from '../img/error.png'\n\nconst NotFound: React.FC = () => {\n    return (\n        <div>\n            <Search search=\"\" />\n\n            <div className=\"error_weather\" style={{marginTop: 50}}>\n                <div className=\"error_weather\">\n                    <img src={ErrorImage} alt=\"Error\" className=\"error_image\" />\n                    <span className=\"error_text\">The data was not found!</span>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default NotFound;","import React from 'react';\nimport { Route, Switch } from \"react-router-dom\";\n\nimport Forecast from './pages/Forecast';\nimport Main from './pages/Main'\nimport Weather from './pages/Weather'\nimport NotFound from './pages/NotFound'\n\nimport './css/main.css'\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"container\">\n      <Switch>\n        <Route exact path=\"/\"><Main /></Route>\n        <Route path=\"/forecast/:city\" children={<Forecast />} />\n        <Route path=\"/:city/:day\" children={<Weather />} />\n        <Route component={NotFound} />\n      </Switch>\n    </div>\n  )\n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}