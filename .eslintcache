[{"/Users/denis/train_typescript/src/index.tsx":"1","/Users/denis/train_typescript/src/reportWebVitals.ts":"2","/Users/denis/train_typescript/src/App.tsx":"3","/Users/denis/train_typescript/src/pages/Forecast.tsx":"4","/Users/denis/train_typescript/src/pages/Main.tsx":"5","/Users/denis/train_typescript/src/functions/index.js":"6","/Users/denis/train_typescript/src/Search.tsx":"7","/Users/denis/train_typescript/src/pages/Weather.tsx":"8","/Users/denis/train_typescript/src/componennts/Recommend.tsx":"9","/Users/denis/train_typescript/src/componennts/loader.tsx":"10","/Users/denis/train_typescript/src/pages/NotFound.tsx":"11"},{"size":522,"mtime":1610891853717,"results":"12","hashOfConfig":"13"},{"size":425,"mtime":1610884499835,"results":"14","hashOfConfig":"13"},{"size":682,"mtime":1611138015591,"results":"15","hashOfConfig":"13"},{"size":9398,"mtime":1611138107933,"results":"16","hashOfConfig":"13"},{"size":1713,"mtime":1611138085123,"results":"17","hashOfConfig":"13"},{"size":312,"mtime":1611077875281,"results":"18","hashOfConfig":"13"},{"size":1146,"mtime":1611138147003,"results":"19","hashOfConfig":"13"},{"size":5128,"mtime":1611138057361,"results":"20","hashOfConfig":"13"},{"size":1731,"mtime":1611135837735,"results":"21","hashOfConfig":"13"},{"size":379,"mtime":1610993434675,"results":"22","hashOfConfig":"13"},{"size":565,"mtime":1611086015708,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"r7ipx2",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"/Users/denis/train_typescript/src/index.tsx",[],["51","52"],"/Users/denis/train_typescript/src/reportWebVitals.ts",[],"/Users/denis/train_typescript/src/App.tsx",[],"/Users/denis/train_typescript/src/pages/Forecast.tsx",["53","54","55","56","57"],"import React, { useEffect, useState } from 'react';\nimport {\n    useParams, Link\n} from \"react-router-dom\";\n\nimport { formData } from '../functions/index'\nimport '../css/forecast.css'\nimport ErrorImage from '../img/error.png'\n\nimport Loader from '../componennts/loader'\nimport Search from '../Search'\n\ninterface RouteParams {\n    city: string\n}\n\nconst Forecast: React.FC = () => {\n    const [data, setData] = useState<IWeather[]>([]);\n    const [cod, setCod] = useState('')\n    const [loading, setLoading] = useState<boolean>(false)\n    useEffect(() => {\n        loadContent();\n    }, []);\n\n    let params = useParams<RouteParams>();\n\n    var today = new Date();\n    var dd = String(today.getDate()).padStart(2, '0');\n    var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\n    var yyyy = today.getFullYear();\n\n    const loadContent = () => {\n        const API_KEY = process.env.REACT_APP_WEATHER_API_KEY;\n        const url = \"https://api.openweathermap.org/data/2.5/forecast?q=\" + params.city + \"&appid=\"+API_KEY;\n\n        fetch(url)\n            .then(response => response.json())\n            .then(data => {\n                setCod(data.cod)\n                if (data.cod == 200) {\n                    const dates = data.list.map((item: any) => {\n                        return item.dt_txt.split(\" \")[0];\n                    }).filter((item: any, i: number, currArr: any) => {\n                        return currArr.indexOf(item) === i;\n                    })\n                    let sortedResults: { date: any; weather: any[]; main: any[] }[] = [];\n                    for (let i = 0; i < dates.length; i++) {\n                        sortedResults.push({\n                            date: dates[i],\n                            weather: [],\n                            main: []\n                        });\n                    }\n\n                    const todayNew = mm + '/' + dd + '/' + yyyy;\n                    const arraysOfTimeToday: any[] = [];\n                    data.list.map((item: any) => {\n                        const date = item.dt_txt.split(\"-\");\n                        const year = date[0];\n                        const month = date[1];\n                        const day = date[2].split(\" \")[0];\n\n                        const dateItem = month + \"/\" + day + \"/\" + year;\n\n                        if (dateItem === todayNew) {\n                            arraysOfTimeToday.push(item)\n                        }\n                    })\n\n                    var todaysData;\n                    if (arraysOfTimeToday.length === 1) {\n                        todaysData = {\n                            weather: [{\n                                temp: arraysOfTimeToday.map((item: any) => item.main.temp),\n                                feels_like: arraysOfTimeToday.map((item: any) => item.main.feels_like),\n                            }],\n                            main: [{\n                                icon: (arraysOfTimeToday[0].weather.map((data: any) => data.icon)).toString()\n                            }]\n                        }\n                    }\n                    else {\n                        const allTemp: any[] = [];\n                        const allFeelsLike: any[] = [];\n                        arraysOfTimeToday.map((a) => {\n                            allTemp.push(a.main.temp)\n                            allFeelsLike.push(a.main.feels_like)\n                        })\n                        todaysData = {\n                            weather: [{\n                                temp: Math.round((allTemp.reduce((a, b) => a + b)) / allTemp.length),\n                                feels_like: Math.round((allFeelsLike.reduce((a, b) => a + b)) / allFeelsLike.length),\n                            }],\n                            main: [{\n                                icon: (arraysOfTimeToday[0].weather.map((data: any) => data.icon)).toString()\n                            }]\n                        }\n                    }\n\n                    const dailyData = data.list.filter((list: any) => list.dt_txt.includes(\"15:00:00\"))\n                    dailyData.map((item: any) => {\n                        let itemDate = item.dt_txt.split(\" \")[0];\n\n                        for (let i = 0; i < sortedResults.length; i++) {\n                            if (sortedResults[i].date === itemDate) {\n                                sortedResults[i].weather.push(item.main);\n                                sortedResults[i].main.push(item.weather[0]);\n                            }\n                        }\n                    })\n                    const returnedData = [\n                        {\n                            city: {\n                                id: data.city.id,\n                                name: data.city.name\n                            },\n                            list: sortedResults\n                        }\n                    ]\n                    returnedData[0].list[0].weather = todaysData.weather;\n                    returnedData[0].list[0].main = todaysData.main;\n                    setData(returnedData)\n                }\n                setLoading(true)\n            });\n    }\n    return (\n        <div>\n            <Search search={params.city} />\n            <div className=\"main_container\">\n                {!loading ? (\n                    <div className=\"loader_block_comments\">\n                        <Loader />\n                    </div>\n                ) : (\n                        <div>\n                            {cod !== \"200\" ? (\n                                <div className=\"error_weather\">\n                                    <img src={ErrorImage} alt=\"Error\" className=\"error_image\" />\n                                    <span className=\"error_text\">The city was not found! Or it could be an error with the API</span>\n                                </div>\n                            ) : (\n                                    <div>\n                                        {data.map((item, id) => {\n                                            return (\n                                                <div key={item.city.id}>\n                                                    <h2 className=\"title_weather\">{item.city.name}</h2>\n\n                                                    <div className=\"weather_container\">\n                                                        {item.list.slice(0, 5).map((list, i) => {\n                                                            // console.log(today.getDate())\n                                                            const dayNow = yyyy + \"-\" + mm + \"-\" + dd;\n                                                            return (\n                                                                <Link to={process.env.PUBLIC_URL+ \"/\" + params.city + \"/\" + (list.date).split(\"-\")[2]} className=\"weather_date_container\" key={i}>\n                                                                    <div key={i}>\n                                                                        <span className=\"weather_date\">{list.date === dayNow ? \"Today\" : formData(list.date)}</span>\n\n                                                                        {list.weather.map((info, id) => {\n                                                                            return (\n                                                                                <div key={id} className=\"weather_info_container\">\n                                                                                    <span className=\"weather_temp\">{Math.round(info.temp - 273.15)}°</span>\n                                                                                    <span className=\"weather_feels\">{Math.round(info.feels_like - 273.15)}°</span>\n                                                                                </div>\n                                                                            )\n                                                                        })}\n\n                                                                        {list.main.map((main, id) => {\n                                                                            return (\n                                                                                <div key={id}>\n                                                                                    <img src={`http://openweathermap.org/img/wn/${main.icon.slice(0, -1)}d@2x.png`} alt=\"\" />\n                                                                                </div>\n                                                                            )\n                                                                        })}\n                                                                    </div>\n                                                                </Link>\n                                                            )\n                                                        })}\n                                                    </div>\n                                                </div>\n\n                                            )\n                                        })}\n                                    </div>\n                                )}\n                        </div>\n                    )}\n            </div>\n        </div>\n    )\n}\n\nexport default Forecast;","/Users/denis/train_typescript/src/pages/Main.tsx",[],"/Users/denis/train_typescript/src/functions/index.js",[],["58","59"],"/Users/denis/train_typescript/src/Search.tsx",[],"/Users/denis/train_typescript/src/pages/Weather.tsx",["60"],"import React, { useEffect, useState } from 'react';\nimport {\n    useParams, Link\n} from \"react-router-dom\";\n\nimport { formatHours } from '../functions/index'\nimport '../css/weather.css'\nimport ErrorImage from '../img/error.png'\nimport Loader from '../componennts/loader'\n\ninterface RouteParams {\n    city: string,\n    day: string\n}\n\ninterface IWeatherDay {\n    dt_txt: string,\n    main: {\n        temp: number,\n        feels_like: number\n    },\n    weather: [{\n        main: string,\n        description: string,\n        icon: string\n    }],\n    wind: {\n        speed: number\n    }\n}\n\nconst Weather: React.FC = () => {\n    const [data, setData] = useState<IWeatherDay[]>([])\n    const [status, setStatus] = useState(false)\n    const [loading, setLoading] = useState<boolean>(true)\n    let params = useParams<RouteParams>();\n\n    useEffect(() => {\n        const API_KEY = process.env.REACT_APP_WEATHER_API_KEY;\n        const url = \"https://api.openweathermap.org/data/2.5/forecast?q=\" + params.city + \"&appid=\"+API_KEY;\n\n        fetch(url)\n            .then(response => response.json())\n            .then(data => {\n                if (data.cod == 200) {\n                    setLoading(false)\n                    const nowDayData = data.list.filter((item: any) => item.dt_txt.split(\" \")[0].split(\"-\")[2] === params.day);\n                    if (nowDayData.length === 0) {\n                        setStatus(true)\n                    }\n                    setData(nowDayData)\n                }\n                else {\n                    setLoading(false)\n                    setStatus(true)\n                }\n            })\n    }, [params.city, params.day])\n\n    return (\n        <div className=\"weather_section\">\n            <Link to={process.env.PUBLIC_URL+\"/\"} className=\"weather_header\"><span className=\"title_header_weather\">WeatherApp</span></Link>\n\n            <div className=\"weather_main_container\">\n                <h2 className=\"title_main_weather\">{params.city}</h2>\n                <div className=\"weather_main_block\">\n\n                    {loading ? (\n                        <div className=\"loader_block\">\n                            <Loader />\n                        </div>\n                    ) : (\n                            <>\n                                {!status ? (\n                                    <>\n                                        {data.map((item, id) => {\n                                            return (\n                                                <div key={id} className=\"weather_main_date_container\">\n                                                    <span className=\"weather_date\">{formatHours(item.dt_txt)}</span>\n\n                                                    <div key={id} className=\"weather_info_container\">\n                                                        <span className=\"weather_temp\">{Math.round(item.main.temp - 273.15)}°</span>\n                                                        <span className=\"weather_feels\">{Math.round(item.main.feels_like - 273.15)}°</span>\n                                                    </div>\n\n                                                    {item.weather.map((main, id) => {\n                                                        return (\n                                                            <div key={id} className=\"weather_info_container__sub\">\n                                                                <img src={`http://openweathermap.org/img/wn/${main.icon.slice(0, -1)}d@2x.png`} alt=\"\" />\n                                                                <div className=\"info_weather\">\n                                                                    <span className=\"weather_main_title\">{main.main}</span>\n                                                                    <span className=\"weather_description\">{main.description}</span>\n                                                                </div>\n                                                            </div>\n                                                        )\n                                                    })}\n\n                                                </div>\n                                            )\n                                        })}\n                                    </>\n                                ) : (\n                                        <div className=\"error_weather\">\n                                            <div className=\"error_weather\">\n                                                <img src={ErrorImage} alt=\"Error\" className=\"error_image\" />\n                                                <span className=\"error_text\">The data was not found!</span>\n                                            </div>\n                                        </div>\n                                    )}\n                            </>\n                        )}\n                </div>\n            </div>\n            <span className=\"footer_txt footer_margin\">Made by <a href=\"https://github.com/Arboker\">Denis Lupookov</a></span>\n        </div>\n    )\n}\n\n\nexport default Weather;","/Users/denis/train_typescript/src/componennts/Recommend.tsx",[],"/Users/denis/train_typescript/src/componennts/loader.tsx",[],["61","62"],"/Users/denis/train_typescript/src/pages/NotFound.tsx",[],{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","severity":1,"message":"68","line":23,"column":8,"nodeType":"69","endLine":23,"endColumn":10,"suggestions":"70"},{"ruleId":"71","severity":1,"message":"72","line":40,"column":30,"nodeType":"73","messageId":"74","endLine":40,"endColumn":32},{"ruleId":"75","severity":1,"message":"76","line":57,"column":47,"nodeType":"77","messageId":"78","endLine":57,"endColumn":49},{"ruleId":"75","severity":1,"message":"76","line":85,"column":51,"nodeType":"77","messageId":"78","endLine":85,"endColumn":53},{"ruleId":"75","severity":1,"message":"76","line":101,"column":47,"nodeType":"77","messageId":"78","endLine":101,"endColumn":49},{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","replacedBy":"66"},{"ruleId":"71","severity":1,"message":"72","line":45,"column":30,"nodeType":"73","messageId":"74","endLine":45,"endColumn":32},{"ruleId":"63","replacedBy":"79"},{"ruleId":"65","replacedBy":"80"},"no-native-reassign",["81"],"no-negated-in-lhs",["82"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loadContent'. Either include it or remove the dependency array.","ArrayExpression",["83"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside",["81"],["82"],"no-global-assign","no-unsafe-negation",{"desc":"84","fix":"85"},"Update the dependencies array to be: [loadContent]",{"range":"86","text":"87"},[585,587],"[loadContent]"]